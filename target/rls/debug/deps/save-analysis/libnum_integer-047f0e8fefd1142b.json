{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"num_integer","disambiguator":[15126665363911415094,15060389060384370779]},"crate_root":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src","external_crates":[{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[13247424134778133357,16481815765952413637]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13572411314624039282,13359357512625099928]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src/lib.rs","num":3,"id":{"name":"std","disambiguator":[3750589921523954810,18290287533645173412]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[14890871858595356443,14888667412218969654]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[11980846776501062506,6934265430276678212]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16901882320614825464,17293611136263149692]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7780710221280501465,16509340218926100409]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[2329596465555554678,2528473225462956446]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[2373404874432573839,9174489046851804689]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src/lib.rs","num":10,"id":{"name":"num_traits","disambiguator":[12576859573088625415,2183774221058248464]}}],"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":31760,"line_start":11,"line_end":1005,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":840,"byte_end":845,"line_start":31,"line_end":31,"column_start":16,"column_end":21},"alias_span":null,"name":"Roots","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":863,"byte_end":867,"line_start":32,"line_end":32,"column_start":17,"column_end":21},"alias_span":null,"name":"sqrt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":869,"byte_end":873,"line_start":32,"line_end":32,"column_start":23,"column_end":27},"alias_span":null,"name":"cbrt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":875,"byte_end":883,"line_start":32,"line_end":32,"column_start":29,"column_end":37},"alias_span":null,"name":"nth_root","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":31760,"line_start":11,"line_end":1005,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/num-integer-0.1.39/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":68},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":256},{"krate":0,"index":278},{"krate":0,"index":300},{"krate":0,"index":322},{"krate":0,"index":344},{"krate":0,"index":366},{"krate":0,"index":104},{"krate":0,"index":388},{"krate":0,"index":408},{"krate":0,"index":428},{"krate":0,"index":448},{"krate":0,"index":468},{"krate":0,"index":488},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":112},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122}],"decl_id":null,"docs":" Integer trait and functions.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":660,"byte_end":670,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":31956,"byte_end":31961,"line_start":9,"line_end":9,"column_start":11,"column_end":16},"name":"Roots","qualname":"::roots::Roots","value":"Roots: Integer","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40}],"decl_id":null,"docs":" Provides methods to compute an integer's square root, cube root,\n and arbitrary `n`th root.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":33498,"byte_end":33506,"line_start":55,"line_end":55,"column_start":8,"column_end":16},"name":"nth_root","qualname":"::roots::Roots::nth_root","value":"fn (&self, n: u32) -> Self","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Returns the truncated principal `n`th root of an integer\n -- `if x >= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":34238,"byte_end":34242,"line_start":82,"line_end":82,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::roots::Roots::sqrt","value":"fn (&self) -> Self","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Returns the truncated principal square root of an integer -- `⌊√x⌋`","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":34221,"byte_end":34230,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":35072,"byte_end":35076,"line_start":108,"line_end":108,"column_start":8,"column_end":12},"name":"cbrt","qualname":"::roots::Roots::cbrt","value":"fn (&self) -> Self","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Returns the truncated principal cube root of an integer --\n `if x >= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }`","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":35055,"byte_end":35064,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":35263,"byte_end":35267,"line_start":116,"line_end":116,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::roots::sqrt","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the truncated principal square root of an integer --\n see [Roots::sqrt](trait.Roots.html#method.sqrt).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":35246,"byte_end":35255,"line_start":115,"line_end":115,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":35440,"byte_end":35444,"line_start":123,"line_end":123,"column_start":8,"column_end":12},"name":"cbrt","qualname":"::roots::cbrt","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the truncated principal cube root of an integer --\n see [Roots::cbrt](trait.Roots.html#method.cbrt).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":35423,"byte_end":35432,"line_start":122,"line_end":122,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":35628,"byte_end":35636,"line_start":130,"line_end":130,"column_start":8,"column_end":16},"name":"nth_root","qualname":"::roots::nth_root","value":"fn <T> (x: T, n: u32) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the truncated principal `n`th root of an integer --\n see [Roots::nth_root](trait.Roots.html#tymethod.nth_root).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":35611,"byte_end":35620,"line_start":129,"line_end":129,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":897,"byte_end":904,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"Integer","qualname":"::Integer","value":"Integer: Sized + Num + PartialOrd + Ord + Eq","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1440,"byte_end":1449,"line_start":51,"line_end":51,"column_start":8,"column_end":17},"name":"div_floor","qualname":"::Integer::div_floor","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Floored integer division.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2147,"byte_end":2156,"line_start":75,"line_end":75,"column_start":8,"column_end":17},"name":"mod_floor","qualname":"::Integer::mod_floor","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Floored integer modulo, satisfying:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2397,"byte_end":2400,"line_start":86,"line_end":86,"column_start":8,"column_end":11},"name":"gcd","qualname":"::Integer::gcd","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Greatest Common Divisor (GCD).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2641,"byte_end":2644,"line_start":97,"line_end":97,"column_start":8,"column_end":11},"name":"lcm","qualname":"::Integer::lcm","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Lowest Common Multiple (LCM).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2733,"byte_end":2740,"line_start":100,"line_end":100,"column_start":8,"column_end":15},"name":"divides","qualname":"::Integer::divides","value":"fn (&self, other: &Self) -> bool","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Deprecated, use `is_multiple_of` instead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3030,"byte_end":3044,"line_start":111,"line_end":111,"column_start":8,"column_end":22},"name":"is_multiple_of","qualname":"::Integer::is_multiple_of","value":"fn (&self, other: &Self) -> bool","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is a multiple of `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3303,"byte_end":3310,"line_start":122,"line_end":122,"column_start":8,"column_end":15},"name":"is_even","qualname":"::Integer::is_even","value":"fn (&self) -> bool","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Returns `true` if the number is even.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3552,"byte_end":3558,"line_start":133,"line_end":133,"column_start":8,"column_end":14},"name":"is_odd","qualname":"::Integer::is_odd","value":"fn (&self) -> bool","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Returns `true` if the number is odd.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4194,"byte_end":4201,"line_start":153,"line_end":153,"column_start":8,"column_end":15},"name":"div_rem","qualname":"::Integer::div_rem","value":"fn (&self, other: &Self) -> (Self, Self)","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Simultaneous truncated integer division and modulus.\n Returns `(quotient, remainder)`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4177,"byte_end":4186,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4891,"byte_end":4904,"line_start":172,"line_end":172,"column_start":8,"column_end":21},"name":"div_mod_floor","qualname":"::Integer::div_mod_floor","value":"fn (&self, other: &Self) -> (Self, Self)","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Simultaneous floored integer division and modulus.\n Returns `(quotient, remainder)`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5071,"byte_end":5078,"line_start":179,"line_end":179,"column_start":8,"column_end":15},"name":"div_rem","qualname":"::div_rem","value":"fn <T> (x: T, y: T) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Simultaneous integer division and modulus\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5054,"byte_end":5063,"line_start":178,"line_end":178,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5181,"byte_end":5190,"line_start":184,"line_end":184,"column_start":8,"column_end":17},"name":"div_floor","qualname":"::div_floor","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Floored integer division\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5164,"byte_end":5173,"line_start":183,"line_end":183,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5289,"byte_end":5298,"line_start":189,"line_end":189,"column_start":8,"column_end":17},"name":"mod_floor","qualname":"::mod_floor","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Floored integer modulus\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5272,"byte_end":5281,"line_start":188,"line_end":188,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5423,"byte_end":5436,"line_start":194,"line_end":194,"column_start":8,"column_end":21},"name":"div_mod_floor","qualname":"::div_mod_floor","value":"fn <T> (x: T, y: T) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Simultaneous floored integer division and modulus\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5406,"byte_end":5415,"line_start":193,"line_end":193,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5636,"byte_end":5639,"line_start":201,"line_end":201,"column_start":8,"column_end":11},"name":"gcd","qualname":"::gcd","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\n result is always positive.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5611,"byte_end":5628,"line_start":200,"line_end":200,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5787,"byte_end":5790,"line_start":206,"line_end":206,"column_start":8,"column_end":11},"name":"lcm","qualname":"::lcm","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Calculates the Lowest Common Multiple (LCM) of the number and `other`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5762,"byte_end":5779,"line_start":205,"line_end":205,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23605,"byte_end":23617,"line_start":688,"line_end":688,"column_start":12,"column_end":24},"name":"IterBinomial","qualname":"::IterBinomial","value":"IterBinomial {  }","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51}],"decl_id":null,"docs":" An iterator over binomial coefficients.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24240,"byte_end":24243,"line_start":715,"line_end":715,"column_start":12,"column_end":15},"name":"new","qualname":"<IterBinomial<T>>::new","value":"fn (n: T) -> IterBinomial<T>","parent":null,"children":[],"decl_id":null,"docs":" For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25640,"byte_end":25648,"line_start":772,"line_end":772,"column_start":8,"column_end":16},"name":"binomial","qualname":"::binomial","value":"fn <T> (mut n: T, k: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Calculate the binomial coefficient.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26174,"byte_end":26185,"line_start":794,"line_end":794,"column_start":8,"column_end":19},"name":"multinomial","qualname":"::multinomial","value":"fn <T> (k: &[T]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Calculate the multinomial coefficient.\n","sig":null,"attributes":[]}],"impls":[{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23664,"byte_end":23676,"line_start":694,"line_end":694,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24378,"byte_end":24390,"line_start":722,"line_end":722,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,114,111,111,116,115,46,114,115],"byte_start":31963,"byte_end":31970,"line_start":9,"line_end":9,"column_start":18,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":68},"to":{"krate":0,"index":34}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":906,"byte_end":911,"line_start":34,"line_end":34,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1734},"to":{"krate":0,"index":68}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":914,"byte_end":917,"line_start":34,"line_end":34,"column_start":28,"column_end":31},"kind":"SuperTrait","from":{"krate":10,"index":1048},"to":{"krate":0,"index":68}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":920,"byte_end":930,"line_start":34,"line_end":34,"column_start":34,"column_end":44},"kind":"SuperTrait","from":{"krate":1,"index":2428},"to":{"krate":0,"index":68}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":933,"byte_end":936,"line_start":34,"line_end":34,"column_start":47,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":2410},"to":{"krate":0,"index":68}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":939,"byte_end":941,"line_start":34,"line_end":34,"column_start":53,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":2380},"to":{"krate":0,"index":68}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23664,"byte_end":23676,"line_start":694,"line_end":694,"column_start":9,"column_end":21},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,105,110,116,101,103,101,114,45,48,46,49,46,51,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24378,"byte_end":24390,"line_start":722,"line_end":722,"column_start":22,"column_end":34},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":106},"to":{"krate":1,"index":3802}}]}