{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"ieee754","disambiguator":[13197634736361735018,8229010000576640588]},"crate_root":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/ieee754-0.2.2/src","external_crates":[{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/ieee754-0.2.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3750589921523954810,18290287533645173412]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/ieee754-0.2.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[13247424134778133357,16481815765952413637]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/ieee754-0.2.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13572411314624039282,13359357512625099928]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/ieee754-0.2.2/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[14890871858595356443,14888667412218969654]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/ieee754-0.2.2/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[11980846776501062506,6934265430276678212]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/ieee754-0.2.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16901882320614825464,17293611136263149692]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/ieee754-0.2.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7780710221280501465,16509340218926100409]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/ieee754-0.2.2/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[2329596465555554678,2528473225462956446]}},{"file_name":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/ieee754-0.2.2/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[2373404874432573839,9174489046851804689]}}],"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":20213,"line_start":1,"line_end":610,"column_start":1,"column_end":43}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":20213,"line_start":1,"line_end":610,"column_start":1,"column_end":43},"name":"","qualname":"::","value":"/home/ajmwagar/.cargo/registry/src/github.com-1ecc6299db9ec823/ieee754-0.2.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":18},{"krate":0,"index":22},{"krate":0,"index":26},{"krate":0,"index":30},{"krate":0,"index":34},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":106}],"decl_id":null,"docs":" Low-level manipulations of IEEE754 floating-point numbers.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":616,"byte_end":620,"line_start":28,"line_end":28,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25}],"decl_id":null,"docs":" An iterator over floating point numbers, created by `Ieee754::upto`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2387,"byte_end":2391,"line_start":90,"line_end":90,"column_start":11,"column_end":15},"name":"Bits","qualname":"::Bits","value":"Bits: Eq + PartialEq + PartialOrd + Ord + Copy","parent":null,"children":[{"krate":0,"index":24}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2443,"byte_end":2449,"line_start":91,"line_end":91,"column_start":8,"column_end":14},"name":"as_u64","qualname":"::Bits::as_u64","value":"fn (self) -> u64","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2651,"byte_end":2658,"line_start":101,"line_end":101,"column_start":11,"column_end":18},"name":"Ieee754","qualname":"::Ieee754","value":"Ieee754: Copy + PartialEq + PartialOrd","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64}],"decl_id":null,"docs":" Types that are IEEE754 floating point numbers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3224,"byte_end":3228,"line_start":120,"line_end":120,"column_start":8,"column_end":12},"name":"upto","qualname":"::Ieee754::upto","value":"fn (self, lim: Self) -> Iter<Self>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Iterate over each value of `Self` in `[self, lim]`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3326,"byte_end":3330,"line_start":123,"line_end":123,"column_start":10,"column_end":14},"name":"Bits","qualname":"::Ieee754::Bits","value":"type Bits: Bits;","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" A type that represents the raw bits of `Self`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3413,"byte_end":3421,"line_start":125,"line_end":125,"column_start":10,"column_end":18},"name":"Exponent","qualname":"::Ieee754::Exponent","value":"type Exponent;","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" A type large enough to store the true exponent of `Self`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3508,"byte_end":3519,"line_start":127,"line_end":127,"column_start":10,"column_end":21},"name":"RawExponent","qualname":"::Ieee754::RawExponent","value":"type RawExponent;","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" A type large enough to store the raw exponent (i.e. with the bias).\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3594,"byte_end":3605,"line_start":129,"line_end":129,"column_start":10,"column_end":21},"name":"Significand","qualname":"::Ieee754::Significand","value":"type Significand;","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" A type large enough to store the significand of `Self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3902,"byte_end":3906,"line_start":142,"line_end":142,"column_start":8,"column_end":12},"name":"next","qualname":"::Ieee754::next","value":"fn (self) -> Self","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Return the next value after `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4120,"byte_end":4123,"line_start":148,"line_end":148,"column_start":8,"column_end":11},"name":"ulp","qualname":"::Ieee754::ulp","value":"fn (self) -> Option<Self>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Return the unit-in-the-last-place ulp of `self`. That is,\n `x.abs().next() - x.abs()`, but handling overflow properly.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4443,"byte_end":4447,"line_start":161,"line_end":161,"column_start":8,"column_end":12},"name":"prev","qualname":"::Ieee754::prev","value":"fn (self) -> Self","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Return the previous value before `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4677,"byte_end":4681,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"bits","qualname":"::Ieee754::bits","value":"fn (self) -> Self::Bits","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" View `self` as a collection of bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4934,"byte_end":4943,"line_start":180,"line_end":180,"column_start":8,"column_end":17},"name":"from_bits","qualname":"::Ieee754::from_bits","value":"fn (x: Self::Bits) -> Self","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" View a collections of bits as a floating point number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5216,"byte_end":5229,"line_start":191,"line_end":191,"column_start":8,"column_end":21},"name":"exponent_bias","qualname":"::Ieee754::exponent_bias","value":"fn () -> Self::Exponent","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Get the bias of the stored exponent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6668,"byte_end":6681,"line_start":233,"line_end":233,"column_start":8,"column_end":21},"name":"decompose_raw","qualname":"::Ieee754::decompose_raw","value":"fn (self) -> (bool, Self::RawExponent, Self::Significand)","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Break `self` into the three constituent parts of an IEEE754 float.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7967,"byte_end":7980,"line_start":270,"line_end":270,"column_start":8,"column_end":21},"name":"recompose_raw","qualname":"::Ieee754::recompose_raw","value":"fn (sign: bool, expn: Self::RawExponent, signif: Self::Significand) -> Self","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Create a `Self` out of the three constituent parts of an IEEE754 float.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9489,"byte_end":9498,"line_start":314,"line_end":314,"column_start":8,"column_end":17},"name":"decompose","qualname":"::Ieee754::decompose","value":"fn (self) -> (bool, Self::Exponent, Self::Significand)","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Break `self` into the three constituent parts of an IEEE754 float.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10772,"byte_end":10781,"line_start":351,"line_end":351,"column_start":8,"column_end":17},"name":"recompose","qualname":"::Ieee754::recompose","value":"fn (sign: bool, expn: Self::Exponent, signif: Self::Significand) -> Self","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Create a `Self` out of the three constituent parts of an IEEE754 float.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":706,"byte_end":710,"line_start":33,"line_end":33,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2114,"byte_end":2118,"line_start":76,"line_end":76,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":706,"byte_end":710,"line_start":33,"line_end":33,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":8},"to":{"krate":2,"index":3802}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2114,"byte_end":2118,"line_start":76,"line_end":76,"column_start":42,"column_end":46},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":8},"to":{"krate":2,"index":4216}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2393,"byte_end":2395,"line_start":90,"line_end":90,"column_start":17,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":2380},"to":{"krate":0,"index":22}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2398,"byte_end":2407,"line_start":90,"line_end":90,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2374},"to":{"krate":0,"index":22}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2410,"byte_end":2420,"line_start":90,"line_end":90,"column_start":34,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":2428},"to":{"krate":0,"index":22}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2423,"byte_end":2426,"line_start":90,"line_end":90,"column_start":47,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":2410},"to":{"krate":0,"index":22}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2429,"byte_end":2433,"line_start":90,"line_end":90,"column_start":53,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":1738},"to":{"krate":0,"index":22}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2660,"byte_end":2664,"line_start":101,"line_end":101,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1738},"to":{"krate":0,"index":34}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2667,"byte_end":2676,"line_start":101,"line_end":101,"column_start":27,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":2374},"to":{"krate":0,"index":34}},{"span":{"file_name":[47,104,111,109,101,47,97,106,109,119,97,103,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,101,101,101,55,53,52,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2679,"byte_end":2689,"line_start":101,"line_end":101,"column_start":39,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":2428},"to":{"krate":0,"index":34}}]}